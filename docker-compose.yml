services:
  postgres:
    image: postgres:15-alpine
    container_name: pms_postgres
    environment:
      POSTGRES_DB: product_management
      POSTGRES_USER: pms_user
      POSTGRES_PASSWORD: pms_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pms_user -d product_management"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build: ./backend
    container_name: pms_backend
    environment:
      DATABASE_URL: postgresql://pms_user:pms_password@postgres:5432/product_management
      PYTHONUNBUFFERED: 1
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload --reload-dir /app/app

  frontend:
    build:
      context: ./frontend
      args:
        # Передаем правильный URL для взаимодействия контейнеров
        - REACT_APP_API_URL=http://backend:8000
    container_name: pms_frontend
    ports:
      # Nginx внутри слушает порт 80, мы пробрасываем его на 3000 хоста
      - "3000:80"
    # Volumes для кода и node_modules не нужны для production-сборки с Nginx
    # и могут перезаписать собранные файлы пустыми директориями.
    # environment также не нужен, так как переменная "запекается" при сборке.
    depends_on:
      - backend

volumes:
  postgres_data: